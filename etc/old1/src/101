; -*- mode:lisp; indent-tabs-mode: t; c-basic-offset: 2; tab-width: 2 -*- 
  ; vim: filetype=lisp: ts=2 sw=2 sts=2  et :
;#!/usr/local/bin/sbcl --script
"


# An experiment in ethics

"

;---------.---------.---------.---------.--------.---------.----------
(defstruct ch!
  (meta  #\%)
  (less  #\<)
  (num   #\$)
  (pole  #\')
  (more  #\>)
  (klass #\!)
  (skip  #\?)
	(sep   #\,))

(defstruct lsh!
  (poles 10)
  (trim  0.95))

(defstruct nb!
  (wait 5)
  (m 2)
  (k 1))

(defstruct control 
  (nb   (make-nb!))
  (lsh  (make-lsh!))
  (ch   (make-ch!)))

(defvar *O* (make-control))

;---------.---------.---------.---------.--------.---------.----------
(defparameter *tries* 0.0000001)
(defparameter *fails* 0)

(defmacro deftest (name parameters &body body)
  `(defun ,name ,parameters
     (let ((i-am ',name))
       ,@body)))

(defmacro ok (want got &optional (msg "") &rest txt)
	`(progn 
     (incf *tries*)
     (handler-case
       (if (not (equalp ,want ,got))
         (error (format nil ,msg ,@txt)))
       (t (c)
          (incf *fails*)
          (let ((n (round (* 100 (/ (- *tries* *fails*) *tries*)))))
            (format t "~&; E> ~a ~a passed: ~a % ~%" i-am c n ))))))

(defun p(x) (round (* 100 x)))
;---------.---------.---------.---------.--------.---------.----------
; hash defines
(defun stop ()
  #+sbcl (sb-ext:exit)
  #+:clisp (ext:exit))

(defun cli ()
  #+clisp ext:*args*
  #+sbcl sb-ext:*posix-argv*)

(defun the-slots (it)
  #+sbcl
  (mapcar #'sb-mop:slot-definition-name 
          (sb-mop:class-slots (class-of it)))
  #+clisp
  (mapcar #'slot-definition-name
          (class-slots (class-of it))))
  
;---------.---------.---------.---------.--------.---------.----------
; macros
(defmacro ? (obj first-slot &rest more-slots)
  (if (null more-slots)
    `(slot-value ,obj ',first-slot)
    `(? (slot-value ,obj ',first-slot) ,@more-slots)))

(defmacro ?? (&rest x) `(? *O* ,@x))

(defmacro while (test &body body)
  `(do () ((not ,test)) 
    ,@body))

(defmacro aif (test then &optional else)
  `(let ((it ,test)) 
     (if it ,then ,else)))

(defmacro whale (test &body body )
  `(let (it)
     (while (setf it ,test) ,@body)))

(defmacro whan (test &body body )
  `(let (it)
     (when (setf it ,test) ,@body)))

(defmacro do-array ((one n arr &optional out) &body body )
  `(dotimes (,n (length ,arr) ,out)
     (let ((,one (aref arr ,n))) ,@body)))

(defmacro do-hash ((key value  h &optional out) &body body )
  `(progn (maphash #'(lambda (,key ,value) ,@body) ,h) ,out))

(defmacro do-read ((it &optional f out) &body body)
  (let ((str (gensym)))
    `(let(,it) 
       (if ,f
         (with-open-file (,str ,f)
           (while (setf ,it (read-line ,str nil))
             ,@body))
         (while (setf ,it (read-line *standard-input* nil))
           ,@body))
       ,out)))

(defmacro do-cells ((val col arr cols) &body body)
  (let ((pos (gensym)))
    `(dolist (,col ,cols)
       (let* ((,pos (? ,col pos))
              (,val (aref ,arr ,pos)))
         (unless (eql ,val (?? ch skip))
           ,@body)))))

;---------.---------.---------.---------.--------.---------.----------
; tricks 
(defun l->a (lst) (coerce lst 'vector))
(defun a->l (a)   (coerce a   'list))

(defun l->str (lst sep  str)
  (format str "~a" (car lst))
  (dolist (x (cdr lst)) (format str "~a ~a" sep x)))

(defun l->s (lst &optional (sep ","))
  (with-output-to-string (str) (l->str lst sep str)))

(defun has (x &rest lst) 
  (dolist (y lst)
    (let ((x (if (stringp x) 
               x 
               (format nil "~a" x))))
      (if (find y x :test #'equal) 
        (return t)))))

(let ((whitespace '(#\, #\space #\tab #\newline)))
  (defun s->words (s &optional (sep whitespace))
    (with-input-from-string (str s)
      (let (tmp out)
        (labels 
						((end-of-word () 
							 (when tmp
								 (push (concatenate 'string (reverse tmp)) out) 
								 (setf tmp nil)) 
							 out))
          (whale (read-char str nil)
						(if (member it sep :test #'eql)
								(end-of-word)
								(push it tmp)))
          (reverse (end-of-word)))))))

(defun round2 (number &optional (precision 3)  (what #'round))
	(let ((div (expt 10 precision)))
		(float (/ (funcall what (* number div)) div))))

;---------.---------.---------.---------.--------.---------.----------
; symbols


(defstruct sym 
  (counts (make-hash-table :test #'equalp))
  (n 0) (pos 0) (txt "") (w 1)
  (ent 0)
  (most 0)
  mode)

(defmethod update ((s sym) x)
  (with-slots (most mode counts  n) s
    (incf n)
    (let ((new (incf (gethash x counts 0))))
      (if (> new most)
        (setf most new
              mode x)))
    x))

(defmethod dec ((s sym) x)
  (with-slots (n counts) s
    (unless (< n 1)
      (decf (gethash x counts 0))
      (decf n))))

(defmethod ent ((s sym) &aux (e 0))
  (with-slots (counts n) s
    (do-hash (k v counts e)
      (length k)
      (let ((p (/ v n)))
        (decf e (* p (log p 2)))))))

(defmethod dist ((s sym) s1 s2)
  (labels ((no (x) (eql x (?? ch skip))))
    (if (and (no s1) (no s2))
      1
      (if (eql s1 s2) 0 1))))

(defmethod like ((s sym) x &optional prior)
  (/ (+ (* (?? nb m)
           prior)
        (gethash x (? s counts)  0))
     (+ (?? nb m)
        (? s n))))

(defmethod spread ((s sym) x) (ent x))
(defmethod mid ((s sym) x) (sym-mode x))
(defmethod prep ((s sym) x) x)

;---------.---------.---------.---------.--------.---------.----------
; numbers
(defstruct num 
  (n 0) (pos 0) (txt "") (w 1)
  (mu 0.0) (m2 0.0) (sd 0.0)
  (lo most-positive-fixnum)
  (hi most-negative-fixnum))

(defmethod update ((nu num) (x string))
  (update nu (prep nu x)))

(defmethod update ((nu num) (x number))
  (with-slots (n lo hi mu m2) nu
    (let ((delta (- x mu)))
      (setf n  (+ 1 n)
            lo (min lo x)
            hi (max hi x)
            mu (+ mu (/ delta n))
            m2 (+ m2 (* delta (- x mu))))
      (sd-prim nu))
    x))

(defmethod dec ((nu num) x)
  (with-slots (n mu m2) nu
    (let ((delta (- x mu)))
      (setf n  (- 1 n)
            mu (- mu (/ delta n))
            m2 (- m2 (* delta (- x mu))))
      (sd-prim nu))))

(defmethod sd-prim ((nu num))
  (with-slots (sd n m2) nu
    (setf sd (cond ((< n 2)  0)
                   ((< m2 0) 0)
                   (t  (sqrt (/ m2 (- n 1))))))))

(defmethod norm ((nu num) x)
  (with-slots (lo hi) nu
    (/ (- x lo) (+ (- hi lo) (/ 1 most-positive-fixnum)))))

(defmethod dist ((nu num) n1 n2)
  (labels ((no (x) (eql x (?? ch skip))))
    (cond ((and (no n1) (no n2)) (return-from dist 1))
    ((no n1) (setf n2 (norm nu n2)
             n1 (if (< n1 0.5) 1 0)))
    ((no n2) (setf n1 (norm nu n1)
       n2 (if (< n2 0.5) 1 0)))
    (t       (setf n1 (norm nu n1)
                   n2 (norm nu n2))))
    (abs (- n1 n2))))

(defmethod like ((n num) x &optional  prior )
  (with-slots (mu sd) n
    (if (<= (- mu (* 4 sd)) x (+ mu (* 4 sd)))
      (/ (exp (- (/ (expt (- x mu) 2)
                    (* 2 (expt sd 2)))))
         (* sd (sqrt (* 2 pi))))

      0)))


(defmethod spread ((s num) x) (num-sd x))
(defmethod mid ((s num) x) (num-mu x))
(defmethod prep ((s num) x) (if (numberp x) x (read-from-string x)))

;---------.---------.---------.---------.--------.---------.----------
; rows

(defstruct row data cells poles)

(defmethod print-object ((r row) str)
  (format str "#R~a" 
    `(row :cells ,(? r cells) :poles ,(? r poles))))

(defmethod klass ((r row)) 
  (klass-val (? r data) (? r cells)))

;---------.---------.---------.---------.--------.---------.----------
; columns

(defstruct col (w 1) (pos 0) (txt ""))
(defstruct cols all klass goals names poles indep nums syms meta)

(defmethod init ((c cols) arr)
  (with-slots (indep klass all names poles goals meta nums syms) c
    (do-array (x pos arr)
      (labels 
					((goalp() (has x (?? ch klass) (?? ch less) (?? ch more)))
					 (nump()  (has x (?? ch num)   (?? ch less) (?? ch more)))
					 (meta()  (has x (?? ch meta)  (?? ch pole))))
        (unless (has x (?? ch skip))
					(push x names)
					(let* ((w     (if (has x (?? ch less)) -1 1))
								 (todo  (if (nump) #'make-num #'make-sym))
								 (col   (funcall todo :pos pos :txt x :w w)))
						(push col all)
						(if (nump) (push col nums)  (push col syms))
						(if (has x (?? ch klass)) (setf klass col))
						(if (has x (?? ch pole))  (push col poles))
						(if (meta)
								(push col meta)
								(if (goalp) (push col goals) (push col indep)))))))
		(sort all #'< :key #'(lambda (x) (? x pos)))
		(setf names (mapcar #'(lambda (x) (? x txt)) all))))

(defmethod update ((cs cols) arr)
  (dolist (col (? cs all) arr)
    (setf (aref arr (? col pos))
          (update col (aref arr (? col pos))))))

;---------.---------.---------.---------.--------.---------.----------
; data

(defstruct data  rows (cols (make-cols)) (npoles 0))

(defmethod new? ((d data)) 
  (not (? d cols names)))

(defmethod clone ((d1 data))
  (let* ((d2   (make-data))
         (names (? d1 cols names)))
    (init (? d2 cols) (l->a names))
    d2))

(defmethod update ((d data) arr)
  (if (new? d)
    (init (? d cols) arr)
    (let* ((arr (update (? d cols) arr))
           (row (make-row :data d :cells arr)))
      (push row (data-rows d))
      arr)))

(defmethod latest-row ((d data))
  (car (? d rows)))

(defmethod klass-val ((d data) arr) 
  (aref arr (? d cols klass pos)))

(defmethod readd ((d data) &optional f)
   (do-read (x f d)
     (update d (l->a (s->words x)))))

(defmethod prior ((me data) all nklasses)
  (/ (+ (length (? me  rows)) (?? nb k))
     (+ (length (? all rows)) (* nklasses  (?? nb k)))))
          
(defmethod print-object ((d data) str)
  (l->str (? d cols names)  ","  str)
  (dotimes (i  (? d npoles)) 
    (format str ", %pole~a" i))
  (terpri str)
  (dolist (row (? d rows))
    (l->str (a->l (? row cells))  ","  str)
    (if (? row poles)
      (l-> str (? row poles)  ","  str)
      (dotimes (i  (? d npoles)) 
        (format str ",0")))
    (terpri str)))

;---------.---------.---------.---------.--------.---------.----------
; incrementally collect performance statistics
(defstruct abcds 
  (yes 0)
  (no  0)
  (acc 0)
  (hs  (make-hash-table :test #'equalp)))

(defmethod acc ((x abcds))
	(setf (? x acc) (/ (? x yes)
										 (+ (? x yes) (? x no) 0.00001))))

(defstruct abcd  
  target 
  (a 0) (b 0) (c 0) (d 0) 
  acc pf prec pd f g d2h)


(defmethod known ((x abcds) klass)
	(setf (gethash klass (? x hs))
        (or (gethash klass (? x hs))
            (make-abcd :target klass
                       :a (+ (? x yes) (? x no))))))

(defmethod update2 ((x abcds) actual predicted)
  (known x actual)
  (known x predicted)
  (if (equalp actual predicted)
    (incf (? x yes))
    (incf (? x no)))
  (do-hash (target abcd (? x hs) x)
    (with-slots (a b c d) abcd
      (if (equalp actual    target)
      (if (equalp predicted actual) (incf d) (incf b))
      (if (equalp predicted target) (incf c) (incf  a))))))

(defmethod ready ((x abcds))
	(do-hash (k y (? x hs) x) (ready y)))

(defmethod ready ((x abcd))
  (with-slots ( a b c d acc pf prec pd f g n d2h) x
    (let (notpf 
          (zip (float (expt 10 -16))))
      (setf acc   (/ (+ a d)        (+ zip a b c d))
            pf    (if (zerop (+ a c)) 0  (/ c (+ zip a c )))
            prec  (/ d              (+ zip c d    ))
            pd    (/ d              (+ zip b d    ))
            notpf (- 1 pf)
            f     (/ (* 2 prec pd)  (+ zip prec pd))
            g     (/ (* 2 notpf pd) (+ zip notpf pd))
            d2h   (- 1 (sqrt (+ (expt (- 0 pf) 2) 
                                (expt (- 1 pd) 2))))))))

(defmethod print-object ((x abcds) str)
  (do-hash (k v (? x hs))
	  (setf (? x acc) (acc x))
    (format str "~&~a= {acc=~a, stats= ~a}" 
                  k (round (* 100 (? x acc))) v)))

(defmethod print-object ((x abcd) str)
	(ready x)
	(with-slots (target pf prec pd f g n c d acc  a b c d) x
    (print `(target ,target a ,a b ,b c ,c d ,d))
		(format str 
      "{target: ~a n: ~a pf: ~a prec: ~a pd: ~a f: ~a g: ~a acc: ~a}"
			target (+ c d) (round (* 100 pf)) (round (* 100 prec))
			(round (* 100 pd)) (round (* 100 f)) 
      (round (* 100 g)) (round (* 100 acc)))))

;---------.---------.---------.---------.--------.---------.----------

(defun adds (lst &optional seen)
  (let ((seen (or seen
                  (if (numberp (car lst)) (make-num) (make-sym)))))
    (dolist (one lst seen)
      (update seen one))))

(defun xpect (x y)
  (let ((n (+ (? x n) (? y n))))
     (+ (* (/ (? x n) n) 
           (spread x))
        (* (/ (? y n) n) 
           (spread y)))))

;---------.---------.---------.---------.--------.---------.----------
; nb
(defstruct nb 
	(abcds (make-abcds))
  (total (make-data)) 
  (nklasses 0)
  (klasses (make-hash-table :test #'equal)))

(defmethod init ((n nb) f)
  (do-read (x f n)
    (update n (l->a (s->words x)))))

(defmethod classify ((n nb) arr)
  (with-slots (total pairs abcds) n
	  (let* ((actual    (klass-val total arr))
           (predicted (predict n arr)))
      ;(print `(actual ,actual predicted ,predicted))
      (update2 abcds actual predicted)))) 

(defmethod predict ((n nb) arr)
  (let ((hi -10000000000000)
        best)
    (do-hash (one k (? n klasses) best)
      (setf  best (or best one)) ; so we have at least one
      (let* ((ph    (prior k (? n total) (? n nklasses)))
             (tmp   ph))
        (do-cells (val col arr (? k cols indep))
           ;(format t "~a ~a " one (? col txt) )
           (setf tmp (* tmp (like col val ph))))
        (if (> tmp hi)
          (setf hi tmp
                best one))))))

(defmethod add-klass ((n nb) key)
  (incf (? n nklasses))
  (setf (gethash key (? n klasses)) 
        (clone (? n total))))

(defmethod update ((n nb) arr)
  (with-slots (total klasses) n
    (setf arr (update total arr))
    (if (> (length (? total rows)) (?? nb wait))
      (classify n arr))
    (whan (latest-row total)
			(let* ((key   (klass it))
             (klass (or (gethash key klasses)
                        (add-klass n key))))
          (update klass arr)))))


;---------.---------.---------.---------.--------.---------.----------
; top-level
(defun cli2options (thing &optional (argv (cli)))
    (dolist (slot (the-slots thing) thing)
      (aif (position slot argv 
             :test #'(lambda (a b)
                       (equalp b (format nil ":~a" a))))
          (setf (slot-value thing slot) 
                (read-from-string (nth (+ 1 it ) argv))))))

(defun main (argv) 
  (let* ((x (car argv)))
    (cond ((equalp x "table") (weather1))
          ((equalp x "nb" )   (cli2options (? *O* nb))
                              (nb)))))

(if (cli) (main (cli)))
